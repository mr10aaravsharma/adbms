---------------query optimizatoin
#
alter table city add index Population_index (Population);
alter table country add index Code_index (Code);

#
select * from city;

#
select * from city join country on CountryCode = Code and city.Population > 
300000;

#
select * from city where CountryCode in (select Code from country where Code 
Like "%A%");




-------------------query monitor
# explain analyze
# simple
select first_name, last_name 

from actor 

where last_name like '%GEN%'; 

# grp by hvg
select last_name as 'Last Name', count(last_name) as 'Last Name Count' 

from actor 

group by last_name 

having count(last_name) > 1; 
# join
select s.first_name as 'First Name', s.last_name as 'Last Name', a.address as 'Address' 

from staff as s 

join address as a  

ON a.address_id = s.address_id; 
# nested
select CONCAT(first_name,' ',last_name) as 'Actors in Alone Trip' 

from actor 

where actor_id in  

(select actor_id from film_actor where film_id =  

(select film_id from film where title = 'Alone Trip')); 
# aggregate

SELECT COUNT(last_name) AS "Last Name Count" 

 
 

FROM actor  

 

GROUP BY last_name 

 

; 





--------------------spatial
const data = {
  type: "FeatureCollection",
  features: [
    {
      type: "Feature",
      geometry: {
        type: "Point",
        coordinates: [
          [122.0, 10.0],
          [113.0, 2.0],
          [14.0, 0.0],
          [235.0, 1.0],
        ],
      },
      properties: { Name: "Redwood City", time: 14.0 },
    },
    {
      type: "Feature",
      geometry: {
        type: "LineString",
        coordinates: [
          [102.0, 0.0],
          [103.0, 1.0],
          [104.0, 0.0],
          [105.0, 1.0],
        ],
      },
      properties: { Name: "USA", time: 24.0 },
    },
    {
      type: "Feature",
      geometry: {
        type: "Polygon",
        coordinates: [
          [
            [100.0, 0.0],
            [101.0, 0.0],
            [101.0, 1.0],
            [100.0, 1.0],
            [100.0, 0.0],
          ],
        ],
      },
      properties: { Name: "Ghatkopar", prop1: { this: "that" } },
    },
  ],
};
const features = data["features"];
features.map((feature) => {
  const coordindates = feature.geometry.coordinates;
  if (
    coordindates[0][0] > 100 &&
    coordindates[0][1] < 102 &&
    feature.properties.time > 20
  ) {
    console.log(feature.properties);
  }
});





-------------------------------------temporal
create database Spa_temp;
use spa_temp;
create table Dec_records(
 dates date,
 present_time time,
 LastName varchar(25),
 FirstName varchar(25),
 Location varchar(25)
);
insert into Dec_records values
("2022-12-01","09:20:30","Nagpal","Avni","Kandivali"),
("2022-12-01","09:30:30","Shukla","Ravi","Andheri"),
("2022-12-01","09:45:30","Savant","Anvay","Borivali"),
("2022-12-02","09:00:30","Savant","Anvay","Bhayandar"),
("2022-12-02","10:00:30","Coelho","Annie","Bandra"),
("2022-12-02","10:40:30","Petta","Jimmy","Bandra");
select * from Dec_records where present_time < "10:00:00" ;
select * from Dec_records where location = "Kandivali"





----------------------------partition
# range partitioning
CREATE TABLE Sales ( cust_id INT NOT NULL, name VARCHAR(40), store_id VARCHAR(20) NOT NULL, bill_no INT NOT NULL, bill_date DATE PRIMARY KEY NOT NULL, amount DECIMAL(8,2) NOT NULL)
PARTITION BY RANGE (year(bill_date))(
PARTITION p0 VALUES LESS THAN (2016), 
PARTITION p1 VALUES LESS THAN (2017), 
PARTITION p2 VALUES LESS THAN (2018), 
PARTITION p3 VALUES LESS THAN (2020));
INSERT INTO Sales VALUES
(1, 'Tushar', 'S001', 101, '2015-01-02', 125.56), (2, 'Rohan', 'S003', 103, '2015-01-25', 476.50), (3, 'Vijay', 'S012', 122, '2016-02-15', 335.00), (4, 'Vikas', 'S345', 121, '2016-03-26', 787.00), (5, 'Aditya', 'S234', 132, '2017-04-19', 678.00), (6, 'Raj', 'S743', 111, '2017-05-31', 864.00), (7, 'Jay', 'S234', 115, '2018-06-11', 762.00), (8, 'Meet', 'S012', 125, '2019-07-24', 300.00), (9, 'Sarth', 'S456', 119, '2019-08-02', 492.20);
SELECT TABLE_NAME, PARTITION_NAME, TABLE_ROWS, AVG_ROW_LENGTH, DATA_LENGTH
FROM INFORMATION_SCHEMA.PARTITIONS
WHERE TABLE_NAME = 'Sales';

# list partitioning
CREATE TABLE Stores (
cust_name VARCHAR(40), bill_no VARCHAR(20) NOT NULL, store_id INT PRIMARY KEY NOT NULL, bill_date DATE NOT NULL, amount DECIMAL(8,2) NOT NULL
)
PARTITION BY LIST(store_id) (
PARTITION pEast VALUES IN (101, 103, 105), 
PARTITION pWest VALUES IN (102, 104, 106), 
PARTITION pNorth VALUES IN (107, 109, 111), 
PARTITION pSouth VALUES IN (108, 110, 112));
INSERT INTO Stores VALUES
(1, 'Tushar', 101, '2015-01-02', 125.56), (2, 'Rohan', 102, '2015-01-25', 476.50), (3, 'Vijay', 103, '2016-02-15', 335.00), (4, 'Vikas',104, '2016-03-26', 787.00), (5, 'Aditya',105, '2017-04-19', 678.00), (6, 'Raj', 106, '2017-05-31', 864.00), (7, 'Jay', 107, '2018-06-11', 762.00), (8, 'Meet', 108, '2019-07-24', 300.00), (9, 'Sarth',110, '2019-08-02', 492.20);
SELECT TABLE_NAME, PARTITION_NAME, TABLE_ROWS, AVG_ROW_LENGTH, DATA_LENGTH
FROM INFORMATION_SCHEMA.PARTITIONS
WHERE TABLE_NAME = 'Stores';

# hash partitioning
CREATE TABLE NewStores (
cust_name VARCHAR(40), bill_no VARCHAR(20) NOT NULL, store_id INT PRIMARY KEY NOT NULL, bill_date DATE NOT NULL, amount DECIMAL(8,2) NOT NULL
)
PARTITION BY HASH(store_id)
PARTITIONS 4;
INSERT INTO NewStores VALUES
(1, 'Tushar', 101, '2015-01-02', 125.56), (2, 'Rohan', 102, '2015-01-25', 476.50), (3, 'Vijay', 103, '2016-02-15', 335.00), (4, 'Vikas',104, '2016-03-26', 787.00), (5, 'Aditya',105, '2017-04-19', 678.00), (6, 'Raj', 106, '2017-05-31', 864.00), (7, 'Jay', 107, '2018-06-11', 762.00), (8, 'Meet', 108, '2019-07-24', 300.00), (9, 'Sarth',110, '2019-08-02', 492.20);
SELECT TABLE_NAME, PARTITION_NAME, TABLE_ROWS, AVG_ROW_LENGTH, DATA_LENGTH
FROM INFORMATION_SCHEMA.PARTITIONS
WHERE TABLE_NAME = 'New

# key partition
CREATE TABLE AgentDetail (
agent_id INT NOT NULL PRIMARY KEY, agent_name VARCHAR(40)
)
PARTITION BY KEY()
PARTITIONS 3;
Insert into Agentdetail values
(1, 'Tushar'), (2, 'Rohan'), (3, 'Vijay'), (4, 'Vikas'), (5, 'Aditya'), (6, 'Raj'), (7, 'Jay'), (8, 'Meet'), (9, 'Sarth');
SELECT TABLE_NAME, PARTITION_NAME, TABLE_ROWS, AVG_ROW_LENGTH, DATA_LENGTH
FROM INFORMATION_SCHEMA.PARTITIONS
WHERE TABLE_NAME = 'AgentDetai





-------------------------client2
import java.io.*;
import java.net.*;

public class TPCClient2 {

    public static void main(String a[]) throws Exception {
        InetAddress lclhost;
        lclhost = InetAddress.getLocalHost();
        Client client = new Client(lclhost);

        // Sending data to client 2
        client.setSendPort(9003); // recport=8002
        client.setRecPort(8002); // senport=9003
        client.recData();
        client.sendData();
        client.recData();

    }
}

class Client {

    InetAddress lclhost;
    int sendPort, recPort;

    Client(InetAddress lclhost) {
        this.lclhost = lclhost;
    }

    public void setSendPort(int sendPort) {
        this.sendPort = sendPort;
    }

    public void setRecPort(int recPort) {
        this.recPort = recPort;
    }

    public void sendData() throws Exception {
        BufferedReader br;
        DatagramSocket ds;
        DatagramPacket dp;
        String data = "";
        System.out.println("Enter the Response 'VOTE_COMMIT' || 'VOTE_ABORT' ");
        br = new BufferedReader(new InputStreamReader(System.in));

        data = br.readLine();
        System.out.println("Data is " + data);

        ds = new DatagramSocket(sendPort);
        dp = new DatagramPacket(data.getBytes(), data.length(), lclhost, sendPort - 1000);
        ds.send(dp);
        ds.close();

    }

    public void recData() throws Exception {
        byte buf[] = new byte[256];
        DatagramPacket dp;
        DatagramSocket ds;
        ds = new DatagramSocket(recPort);
        dp = new DatagramPacket(buf, buf.length);
        ds.receive(dp);
        ds.close();
        String msgStr = new String(dp.getData(), 0, dp.getLength());

        System.out.println(msgStr);
    }

};





---------------------------------------client1
import java.io.*;
import java.net.*;

public class TPCClient1 {

    public static void main(String a[]) throws Exception {
        InetAddress lclhost;
        lclhost = InetAddress.getLocalHost();
        Client clnt = new Client(lclhost);

        clnt.setSendPort(9001); // recport=8000
        clnt.setRecPort(8000); // sendport=9001
        clnt.recData();
        clnt.sendData();
        clnt.recData();
    }
}

class Client {
    InetAddress lclhost;
    int sendPort, recPort;

    Client(InetAddress lclhost) {
        this.lclhost = lclhost;
    }

    public void setSendPort(int sendPort) {
        this.sendPort = sendPort;
    }

    public void setRecPort(int recPort) {
        this.recPort = recPort;
    }

    public void sendData() throws Exception {
        BufferedReader br;
        DatagramSocket ds;
        DatagramPacket dp;
        String data = "";
        System.out.println("Enter the Response 'VOTE_COMMIT' || 'VOTE_ABORT' ");
        br = new BufferedReader(new InputStreamReader(System.in));
        data = br.readLine();
        System.out.println("Data is " + data);

        ds = new DatagramSocket(sendPort);
        dp = new DatagramPacket(data.getBytes(), data.length(), lclhost, sendPort - 1000);
        ds.send(dp);
        ds.close();

    }

    public void recData() throws Exception {
        byte buf[] = new byte[256];
        DatagramPacket dp;
        DatagramSocket ds;

        ds = new DatagramSocket(recPort);
        dp = new DatagramPacket(buf, buf.length);
        ds.receive(dp);
        ds.close();
        String msgStr = new String(dp.getData(), 0, dp.getLength());
        System.out.println("Client1 data " + msgStr);

    }

};	






--------------------------------server
import java.io.*;
import java.net.*;

public class TPCServer {

    public static void main(String a[]) throws Exception {
        BufferedReader br;
        InetAddress lclhost;
        lclhost = InetAddress.getLocalHost();
        TCPServer ser = new TCPServer(lclhost);

        System.out.println("Server in sending mode....");

        // Sending data to client 1
        ser.setSendPort(9000); // recport=8000
        ser.setRecPort(8001); // sendport=9001

        System.out.println("Send request data to client1..");
        br = new BufferedReader(new InputStreamReader(System.in));
        String s = br.readLine();
        System.out.println("Data is " + s);
        ser.sendData();
        System.out.println("Waiting for response from client1...");
        ser.recData();

        // Sending data to client 2
        ser.setSendPort(9002); // recport=8002
        ser.setRecPort(8003); // senport=9003
        System.out.println("Send request data to client2..");
        br = new BufferedReader(new InputStreamReader(System.in));
        String s1 = br.readLine();
        System.out.println("Data is " + s1);
        ser.sendData();
        System.out.println("Waiting for response from client2.");
        ser.recData();

        // Sending the final result to client 1
        ser.setSendPort(9000);
        ser.sendData();

        // Sending the final result to client 2
        ser.setSendPort(9002);
        ser.sendData();
    }
}

class TCPServer {

    InetAddress lclhost;
    int sendPort, recPort;
    int ssend = 0;
    int scounter = 0;

    TCPServer(InetAddress lclhost) {
        this.lclhost = lclhost;
    }

    public void setSendPort(int sendPort) {
        this.sendPort = sendPort;
    }

    public void setRecPort(int recPort) {
        this.recPort = recPort;
    }

    public void sendData() throws Exception {

        DatagramSocket ds;
        DatagramPacket dp;
        String data = "";

        if (scounter < 2 && ssend < 2) {
            data = "VOTE_REQUEST";
        }

        if (scounter < 2 && ssend > 1) {
            data = "GLOBAL_ABORT";
            data = data + " TRANSACTION ABORTED";

        }
        if (scounter == 2 && ssend > 1) {
            data = "GLOBAL_COMMIT";
            data = data + " TRANSACTION COMMITED";

        }

        ds = new DatagramSocket(sendPort);
        dp = new DatagramPacket(data.getBytes(), data.length(), lclhost, sendPort - 1000);
        ds.send(dp);
        ds.close();
        ssend++;
    }

    public void recData() throws Exception {
        byte buf[] = new byte[256];
        DatagramPacket dp = null;
        DatagramSocket ds = null;
        String msgStr = "";
        try {
            ds = new DatagramSocket(recPort);
            dp = new DatagramPacket(buf, buf.length);
            ds.receive(dp);
            ds.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        msgStr = new String(dp.getData(), 0, dp.getLength());
        System.out.println("String = " + msgStr);
        if (msgStr.equalsIgnoreCase("VOTE_COMMIT")) {
            scounter++;
        }
        System.out.println("Counter value = " + scounter + "n Send value = " + ssend);
    }

};





-------------------------------------------B+ tree
pip install bplustree
from bplustree import BPlusTree
import time
tree = BPlusTree('/tmp/bplustree.db', order=50)
for i in range(1000):
  data=(2*i).to_bytes(10,'big')
  tree[i]=data
data=int(input("Enter key : "))
start_time=time.time()
byte_data=tree.get(data)
end_time=time.time()
int_data=int.from_bytes(byte_data, 'big')
print("Value : ",int_data)
print("Time taken : ",(end_time-start_time)*1000," ms")






-----------------------------------------Btree
!pip install BTrees
from BTrees.IIBTree import  IIBTree
import time

t = IIBTree()
insertion_start_time= time.time()
for i in range(1000):
  t.update({i: 2*i})
insertion_end_time=time.time()
print("Insertion time:", format((insertion_end_time-insertion_start_time)*1000, ".3f"),  "milliseconds")
key = int(input("enter key: "))
search_start_time = time.time()
if  t.has_key(key):
  print(t[key])
search_end_time = time.time()
print("Search time:", format((search_end_time-search_start_time)*1000, ".3f"), "milliseconds")